<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/07/27/hello-world/"/>
      <url>/2024/07/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p><img src="../../public/img/404.jpg" alt="alt text"></p><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>算法笔记</title>
      <link href="/2024/07/27/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/07/27/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h1><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p><img src="https://cdn.acwing.com/media/article/image/2019/05/19/1130_1196bbb27a-2.gif" alt="2.gif"></p><p><strong>原理</strong></p><p>选定某个划分值x（一般选取数组首个元素），将待排数组分为左右两部分。左边均为大于x，右边均为小于x。再递归调用函数处理左右两边。</p><p>快排属于<strong>分治算法</strong>，分治算法都有三步：</p><ol><li>分成子问题</li><li>递归处理子问题</li><li>子问题合并</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="comment">//递归终止</span></span><br><span class="line"><span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x=q[l+r&gt;&gt;<span class="number">1</span>],i=l<span class="number">-1</span>,j=r<span class="number">+1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line"><span class="keyword">do</span> i++;<span class="keyword">while</span>(q[i]&lt;x);</span><br><span class="line"><span class="keyword">do</span> j--;<span class="keyword">while</span>(q[j]&gt;x);</span><br><span class="line"><span class="keyword">if</span>(i&lt;j) <span class="built_in">swap</span>(q[i],q[j]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">quick_sort</span>(q,l,j);</span><br><span class="line"><span class="built_in">quick_sort</span>(q,j<span class="number">+1</span>,r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>STL</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1000000</span><span class="number">+100</span>;</span><br><span class="line"><span class="type">int</span> a[N],n,m,i,j;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;<span class="comment">//sort函数即为快排</span></span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">    <span class="built_in">sort</span>(a<span class="number">+1</span>,a<span class="number">+1</span>+n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习</p><ol><li><a href="https://www.acwing.com/problem/content/787/">快速排序</a></li><li><a href="https://www.acwing.com/problem/content/788/">第k个数</a> </li></ol><hr><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p><a href="https://www.bilibili.com/video/BV1Na411e7Vg/?spm_id_from=333.337.search-card.all.click&amp;vd_source=4cf1335c21865cdae9c04c4d1146427a">视频演示</a></p><p><img src="https://cdn.acwing.com/media/article/image/2019/05/19/1130_4cf170747a-3.gif" alt="3.gif"></p><p><strong>原理</strong></p><p>将一个无序数组一分为二成两个数组，将两个无序数组变为有序数组后，再使用双指针依次选取最小的数合并为一个数组。</p><p>过程中递归调用分为若干个数组（最小为两个元素一组）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> q[],<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="comment">//递归终止</span></span><br><span class="line"><span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一步分为子问题</span></span><br><span class="line"><span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//第二步递归处理子问题</span></span><br><span class="line"><span class="built_in">merge_sort</span>(q,l,mid);</span><br><span class="line"><span class="built_in">merge_sort</span>(q,mid<span class="number">+1</span>,r);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第三步合并子问题</span></span><br><span class="line"><span class="type">int</span> k=<span class="number">0</span>,i=l,j=mid<span class="number">+1</span>,tmp[r-l<span class="number">+1</span>];</span><br><span class="line"><span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)</span><br><span class="line"><span class="keyword">if</span>(q[i]&lt;=q[j]) tmp[k++]=q[i++];</span><br><span class="line"><span class="keyword">else</span> tmp[k++]=q[j++];</span><br><span class="line"><span class="keyword">while</span>(i&lt;=mid) tmp[k++]=q[i++];</span><br><span class="line"><span class="keyword">while</span>(j&lt;=r) tmp[k++]=q[j++];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=l,j=<span class="number">0</span>;i&lt;=r;i++,j++) q[i]=tmp[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://www.acwing.com/problem/content/789/">归并排序</a></p><p><a href="https://www.acwing.com/problem/content/790/">逆序对的数量</a></p><hr><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p><strong>注意边界</strong></p><p><img src="C:\Users\ohyoung\Desktop\微信截图_20240327213556.png" alt="微信截图_20240327213556"></p><p><a href="https://www.acwing.com/problem/content/791/">数的范围</a></p><p><a href="https://www.acwing.com/problem/content/792/">数的三次方根</a></p><hr><h2 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h2><h3 id="一维前缀和"><a href="#一维前缀和" class="headerlink" title="一维前缀和"></a>一维前缀和</h3><p><strong>例题</strong></p><p>输入一个长度为 $n$ 的整数序列。</p><p>接下来再输入 $m$ 个询问，每个询问输入一对 $l,r$。</p><p>对于每个询问，输出原序列中从第 $l$ 个数到第 $r$ 个数的和。</p><p><strong>朴素算法</strong>：暴力遍历求解,时间复杂度为$O(m*n)$。</p><p><strong>前缀和</strong>：定义一个<code>sum[]</code>数组，<code>sum[i]</code>为前<code>i</code>个数之和，每次只需求<code>sum[r]-sum[l-1]</code>,将时间复杂度由 $O(m*n)$降为$O(m+n)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) q[i]+=q[i<span class="number">-1</span>];<span class="comment">//前缀和处理操作</span></span><br><span class="line"></span><br><span class="line">cout&lt;&lt;q[r]-q[l<span class="number">-1</span>];<span class="comment">//查询操作</span></span><br></pre></td></tr></table></figure><hr><h3 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h3><p><strong>例题</strong></p><p>输入一个<code>n</code>行<code>m</code>列的整数矩阵，再输入<code>q</code>个询问，每个询问包含四个整数<code>x1</code>, <code>y1</code>, <code>x2</code>, <code>y2</code>，表示一个子矩阵的左上角坐标和右下角坐标。对于每个询问输出子矩阵中所有数的和。</p><p><strong>思路</strong>同一维前缀和一样，我们先来定义一个二维数组<code>s[][]</code>, <code>s[i][j]</code>表示二维数组中，左上角<code>(1, 1)</code>到右下角<code>(i, j)</code>所包围的矩阵元素的和。接下来推导二维前缀和的公式。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
